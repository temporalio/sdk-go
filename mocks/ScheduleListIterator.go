// Code generated by mockery v1.0.0.
// Modified manually for type alias to work correctly.
// https://github.com/vektra/mockery/issues/236

package mocks

import (
	"github.com/stretchr/testify/mock"
	"go.temporal.io/sdk/client"
)

// ScheduleListIterator is an autogenerated mock type for the ScheduleListIterator type
type ScheduleListIterator struct {
	mock.Mock
}

// HasNext provides a mock function with given fields:
func (_m *ScheduleListIterator) HasNext() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasNext")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *ScheduleListIterator) Next() (*client.ScheduleListEntry, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *client.ScheduleListEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.ScheduleListEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.ScheduleListEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScheduleListEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScheduleListIterator creates a new instance of ScheduleListIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleListIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleListIterator {
	mock := &ScheduleListIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
