// Code generated by mockery v1.0.0.
// Modified manually for type alias to work correctly.
// https://github.com/vektra/mockery/issues/236

package mocks

import (
	"context"

	"go.temporal.io/sdk/client"

	"github.com/stretchr/testify/mock"
)

// ScheduleHandle is an autogenerated mock type for the ScheduleHandle type
type ScheduleHandle struct {
	mock.Mock
}

// Backfill provides a mock function with given fields: ctx, options
func (_m *ScheduleHandle) Backfill(ctx context.Context, options client.ScheduleBackfillOptions) error {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Backfill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleBackfillOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx
func (_m *ScheduleHandle) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Describe provides a mock function with given fields: ctx
func (_m *ScheduleHandle) Describe(ctx context.Context) (*client.ScheduleDescription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Describe")
	}

	var r0 *client.ScheduleDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.ScheduleDescription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.ScheduleDescription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScheduleDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields:
func (_m *ScheduleHandle) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Pause provides a mock function with given fields: ctx, options
func (_m *ScheduleHandle) Pause(ctx context.Context, options client.SchedulePauseOptions) error {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Pause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.SchedulePauseOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trigger provides a mock function with given fields: ctx, options
func (_m *ScheduleHandle) Trigger(ctx context.Context, options client.ScheduleTriggerOptions) error {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Trigger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleTriggerOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unpause provides a mock function with given fields: ctx, options
func (_m *ScheduleHandle) Unpause(ctx context.Context, options client.ScheduleUnpauseOptions) error {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Unpause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleUnpauseOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, options
func (_m *ScheduleHandle) Update(ctx context.Context, options client.ScheduleUpdateOptions) error {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleUpdateOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduleHandle creates a new instance of ScheduleHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleHandle {
	mock := &ScheduleHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
