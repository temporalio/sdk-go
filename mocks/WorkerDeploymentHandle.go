// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v1.0.0.
// Modified manually for type alias to work correctly.
// https://github.com/vektra/mockery/issues/236

// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	"go.temporal.io/sdk/client"

	"github.com/stretchr/testify/mock"
)

// WorkerDeploymentHandle is an autogenerated mock type for the WorkerDeploymentHandle type
type WorkerDeploymentHandle struct {
	mock.Mock
}

// DeleteVersion provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) DeleteVersion(ctx context.Context, options client.WorkerDeploymentDeleteVersionOptions) (client.WorkerDeploymentDeleteVersionResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVersion")
	}

	var r0 client.WorkerDeploymentDeleteVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDeleteVersionOptions) (client.WorkerDeploymentDeleteVersionResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDeleteVersionOptions) client.WorkerDeploymentDeleteVersionResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentDeleteVersionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentDeleteVersionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Describe provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) Describe(ctx context.Context, options client.WorkerDeploymentDescribeOptions) (client.WorkerDeploymentDescribeResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Describe")
	}

	var r0 client.WorkerDeploymentDescribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDescribeOptions) (client.WorkerDeploymentDescribeResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDescribeOptions) client.WorkerDeploymentDescribeResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentDescribeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentDescribeOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVersion provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) DescribeVersion(ctx context.Context, options client.WorkerDeploymentDescribeVersionOptions) (client.WorkerDeploymentVersionDescription, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVersion")
	}

	var r0 client.WorkerDeploymentVersionDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDescribeVersionOptions) (client.WorkerDeploymentVersionDescription, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentDescribeVersionOptions) client.WorkerDeploymentVersionDescription); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentVersionDescription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentDescribeVersionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCurrentVersion provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) SetCurrentVersion(ctx context.Context, options client.WorkerDeploymentSetCurrentVersionOptions) (client.WorkerDeploymentSetCurrentVersionResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for SetCurrentVersion")
	}

	var r0 client.WorkerDeploymentSetCurrentVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentSetCurrentVersionOptions) (client.WorkerDeploymentSetCurrentVersionResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentSetCurrentVersionOptions) client.WorkerDeploymentSetCurrentVersionResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentSetCurrentVersionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentSetCurrentVersionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRampingVersion provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) SetRampingVersion(ctx context.Context, options client.WorkerDeploymentSetRampingVersionOptions) (client.WorkerDeploymentSetRampingVersionResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for SetRampingVersion")
	}

	var r0 client.WorkerDeploymentSetRampingVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentSetRampingVersionOptions) (client.WorkerDeploymentSetRampingVersionResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentSetRampingVersionOptions) client.WorkerDeploymentSetRampingVersionResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentSetRampingVersionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentSetRampingVersionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVersionMetadata provides a mock function with given fields: ctx, options
func (_m *WorkerDeploymentHandle) UpdateVersionMetadata(ctx context.Context, options client.WorkerDeploymentUpdateVersionMetadataOptions) (client.WorkerDeploymentUpdateVersionMetadataResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVersionMetadata")
	}

	var r0 client.WorkerDeploymentUpdateVersionMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentUpdateVersionMetadataOptions) (client.WorkerDeploymentUpdateVersionMetadataResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.WorkerDeploymentUpdateVersionMetadataOptions) client.WorkerDeploymentUpdateVersionMetadataResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(client.WorkerDeploymentUpdateVersionMetadataResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.WorkerDeploymentUpdateVersionMetadataOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkerDeploymentHandle creates a new instance of WorkerDeploymentHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerDeploymentHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerDeploymentHandle {
	mock := &WorkerDeploymentHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
