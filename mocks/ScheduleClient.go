// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internal "go.temporal.io/sdk/internal"
)

// ScheduleClient is an autogenerated mock type for the ScheduleClient type
type ScheduleClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, options
func (_m *ScheduleClient) Create(ctx context.Context, options internal.ScheduleOptions) (internal.ScheduleHandle, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 internal.ScheduleHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.ScheduleOptions) (internal.ScheduleHandle, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.ScheduleOptions) internal.ScheduleHandle); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ScheduleHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.ScheduleOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHandle provides a mock function with given fields: ctx, scheduleID
func (_m *ScheduleClient) GetHandle(ctx context.Context, scheduleID string) internal.ScheduleHandle {
	ret := _m.Called(ctx, scheduleID)

	if len(ret) == 0 {
		panic("no return value specified for GetHandle")
	}

	var r0 internal.ScheduleHandle
	if rf, ok := ret.Get(0).(func(context.Context, string) internal.ScheduleHandle); ok {
		r0 = rf(ctx, scheduleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ScheduleHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields: ctx, options
func (_m *ScheduleClient) List(ctx context.Context, options internal.ScheduleListOptions) (internal.ScheduleListIterator, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 internal.ScheduleListIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.ScheduleListOptions) (internal.ScheduleListIterator, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.ScheduleListOptions) internal.ScheduleListIterator); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ScheduleListIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.ScheduleListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScheduleClient creates a new instance of ScheduleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleClient {
	mock := &ScheduleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
