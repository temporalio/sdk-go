// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v1.0.0.
// Modified manually for type alias to work correctly.
// https://github.com/vektra/mockery/issues/236

// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	"go.temporal.io/sdk/client"

	"github.com/stretchr/testify/mock"
)

// DeploymentClient is an autogenerated mock type for the DeploymentClient type
type DeploymentClient struct {
	mock.Mock
}

// Describe provides a mock function with given fields: ctx, options
//
//lint:ignore SA1019 ignore deprecated versioning APIs
func (_m *DeploymentClient) Describe(ctx context.Context, options client.DeploymentDescribeOptions) (client.DeploymentDescription, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Describe")
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	var r0 client.DeploymentDescription
	var r1 error
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentDescribeOptions) (client.DeploymentDescription, error)); ok {
		return rf(ctx, options)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentDescribeOptions) client.DeploymentDescription); ok {
		r0 = rf(ctx, options)
	} else {
		//lint:ignore SA1019 ignore deprecated versioning APIs
		r0 = ret.Get(0).(client.DeploymentDescription)
	}

	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentDescribeOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields: ctx, options
//
//lint:ignore SA1019 ignore deprecated versioning APIs
func (_m *DeploymentClient) GetCurrent(ctx context.Context, options client.DeploymentGetCurrentOptions) (client.DeploymentGetCurrentResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrent")
	}

	//lint:ignore SA1019 ignore deprecated versioning APIs
	var r0 client.DeploymentGetCurrentResponse
	var r1 error
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentGetCurrentOptions) (client.DeploymentGetCurrentResponse, error)); ok {
		return rf(ctx, options)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentGetCurrentOptions) client.DeploymentGetCurrentResponse); ok {
		r0 = rf(ctx, options)
	} else {
		//lint:ignore SA1019 ignore deprecated versioning APIs
		r0 = ret.Get(0).(client.DeploymentGetCurrentResponse)
	}

	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentGetCurrentOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReachability provides a mock function with given fields: ctx, options
//
//lint:ignore SA1019 ignore deprecated versioning APIs
func (_m *DeploymentClient) GetReachability(ctx context.Context, options client.DeploymentGetReachabilityOptions) (client.DeploymentReachabilityInfo, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetReachability")
	}

	//lint:ignore SA1019 ignore deprecated versioning APIs
	var r0 client.DeploymentReachabilityInfo
	var r1 error
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentGetReachabilityOptions) (client.DeploymentReachabilityInfo, error)); ok {
		return rf(ctx, options)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentGetReachabilityOptions) client.DeploymentReachabilityInfo); ok {
		r0 = rf(ctx, options)
	} else {
		//lint:ignore SA1019 ignore deprecated versioning APIs
		r0 = ret.Get(0).(client.DeploymentReachabilityInfo)
	}

	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentGetReachabilityOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, options
//
//lint:ignore SA1019 ignore deprecated versioning APIs
func (_m *DeploymentClient) List(ctx context.Context, options client.DeploymentListOptions) (client.DeploymentListIterator, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	var r0 client.DeploymentListIterator
	var r1 error
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentListOptions) (client.DeploymentListIterator, error)); ok {
		return rf(ctx, options)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentListOptions) client.DeploymentListIterator); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			//lint:ignore SA1019 ignore deprecated versioning APIs
			r0 = ret.Get(0).(client.DeploymentListIterator)
		}
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCurrent provides a mock function with given fields: ctx, options
//
//lint:ignore SA1019 ignore deprecated versioning APIs
func (_m *DeploymentClient) SetCurrent(ctx context.Context, options client.DeploymentSetCurrentOptions) (client.DeploymentSetCurrentResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for SetCurrent")
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	var r0 client.DeploymentSetCurrentResponse
	var r1 error
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentSetCurrentOptions) (client.DeploymentSetCurrentResponse, error)); ok {
		return rf(ctx, options)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentSetCurrentOptions) client.DeploymentSetCurrentResponse); ok {
		r0 = rf(ctx, options)
	} else {
		//lint:ignore SA1019 ignore deprecated versioning APIs
		r0 = ret.Get(0).(client.DeploymentSetCurrentResponse)
	}
	//lint:ignore SA1019 ignore deprecated versioning APIs
	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentSetCurrentOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeploymentClient creates a new instance of DeploymentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentClient {
	mock := &DeploymentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
