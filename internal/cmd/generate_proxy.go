// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/types"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/packages"
	"golang.org/x/tools/go/types/typeutil"
)

const Header = `// Code generated by go generate; DO NOT EDIT.

package client

import (
	"context"

	"go.temporal.io/api/workflowservice/v1"
)

type WorkflowServiceProxyOptions struct {
	Client workflowservice.WorkflowServiceClient
}

type workflowServiceProxyServer struct {
	client workflowservice.WorkflowServiceClient
}

var _ workflowservice.WorkflowServiceServer = &workflowServiceProxyServer{}

func NewWorfklowServiceProxyServer(options WorkflowServiceProxyOptions) (workflowservice.WorkflowServiceServer, error) {
	return &workflowServiceProxyServer{
		client: options.Client,
	}, nil
}
`

func main() {
	buf := &bytes.Buffer{}

	fmt.Fprint(buf, Header)

	conf := &packages.Config{Mode: packages.NeedImports | packages.NeedTypes | packages.NeedTypesInfo}
	pkgs, err := packages.Load(conf, "go.temporal.io/api/workflowservice/v1")
	if err != nil {
		log.Fatal(err)
	}

	pkg := pkgs[0]
	qual := func(other *types.Package) string {
		if other == pkg.Types {
			return "workflowservice"
		}
		return other.Path()
	}
	scope := pkg.Types.Scope()
	service := scope.Lookup("UnimplementedWorkflowServiceServer")
	if _, ok := service.(*types.TypeName); ok {
		for _, meth := range typeutil.IntuitiveMethodSet(service.Type(), nil) {
			if !meth.Obj().Exported() {
				continue
			}

			name := meth.Obj().Name()
			sig := meth.Obj().Type().(*types.Signature)
			fmt.Fprintf(buf, "\nfunc (wh *workflowServiceProxyServer) %s %s %s {\n", name, types.TypeString(sig.Params(), qual), types.TypeString(sig.Results(), qual))
			params := make([]string, sig.Params().Len())
			for i := 0; i < sig.Params().Len(); i++ {
				params[i] = sig.Params().At(i).Name()
			}
			fmt.Fprintf(buf, "\treturn wh.client.%s(%s)\n", name, strings.Join(params, ", "))
			fmt.Fprintf(buf, "}\n")
		}
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	err = os.WriteFile("proxy.go", src, 0666)
	if err != nil {
		log.Fatal(err)
	}
}
