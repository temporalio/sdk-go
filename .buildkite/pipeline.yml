steps:
  - label: ":golang: check"
    agents:
      queue: "default"
      docker: "*"
    command: "make check"
    plugins:
      - docker-compose#v3.1.0:
          run: build
          config: ./.buildkite/docker-compose.yml

  - label: ":golang: unit-test"
    agents:
      queue: "default"
      docker: "*"
    command: "make unit-test"
    artifact_paths:
      - ".build/coverage/*.out"
    plugins:
      - docker-compose#v3.1.0:
          run: unit-test
          config: ./.buildkite/docker-compose.yml

  - label: ":golang: integration-test-zero-cache"
    agents:
      queue: "default"
      docker: "*"
    command: "make integration-test-zero-cache"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.1.0:
          run: integ-test
          config: ./.buildkite/docker-compose.yml

  - label: ":golang: integration-test-normal-cache"
    agents:
      queue: "default"
      docker: "*"
    command: "make integration-test-normal-cache"
    artifact_paths:
      - ".build/coverage/*.out"
    retry:
      automatic:
        limit: 1
    plugins:
      - docker-compose#v3.1.0:
          run: integ-test
          config: ./.buildkite/docker-compose.yml

  - label: ":alien: fossa"
    agents:
      queue: "default"
      docker: "*"
    command: "make fossa-init fossa-analyze fossa-test"
    branches: "master"
    retry:
      automatic:
        limit: 2
    plugins:
      - docker-compose#v3.1.0:
          run: fossa
          config: ./.buildkite/docker-compose.yml

  - wait

  - label: ":golang: code-coverage"
    agents:
      queue: "default"
      docker: "*"
    command: ".buildkite/scripts/gocov.sh"
    plugins:
      - docker-compose#v3.1.0:
          run: coverage-report
          config: ./.buildkite/docker-compose.yml
