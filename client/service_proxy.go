// Code generated by go generate; DO NOT EDIT.

package client

import (
	"context"

	"go.temporal.io/api/workflowservice/v1"
)

type WorkflowServiceProxyOptions struct {
	Client workflowservice.WorkflowServiceClient
}

type workflowServiceProxyServer struct {
	client workflowservice.WorkflowServiceClient
}

func NewWorfklowServiceProxyServer(options WorkflowServiceProxyOptions) (workflowservice.WorkflowServiceServer, error) {
	return &workflowServiceProxyServer{
		client: options.Client,
	}, nil
}

func (wh *workflowServiceProxyServer) CountWorkflowExecutions(ctx context.Context, req *workflowservice.CountWorkflowExecutionsRequest) (*workflowservice.CountWorkflowExecutionsResponse, error) {
	return wh.client.CountWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) DeprecateNamespace(ctx context.Context, req *workflowservice.DeprecateNamespaceRequest) (*workflowservice.DeprecateNamespaceResponse, error) {
	return wh.client.DeprecateNamespace(ctx, req)
}

func (wh *workflowServiceProxyServer) DescribeNamespace(ctx context.Context, req *workflowservice.DescribeNamespaceRequest) (*workflowservice.DescribeNamespaceResponse, error) {
	return wh.client.DescribeNamespace(ctx, req)
}

func (wh *workflowServiceProxyServer) DescribeTaskQueue(ctx context.Context, req *workflowservice.DescribeTaskQueueRequest) (*workflowservice.DescribeTaskQueueResponse, error) {
	return wh.client.DescribeTaskQueue(ctx, req)
}

func (wh *workflowServiceProxyServer) DescribeWorkflowExecution(ctx context.Context, req *workflowservice.DescribeWorkflowExecutionRequest) (*workflowservice.DescribeWorkflowExecutionResponse, error) {
	return wh.client.DescribeWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) GetClusterInfo(ctx context.Context, req *workflowservice.GetClusterInfoRequest) (*workflowservice.GetClusterInfoResponse, error) {
	return wh.client.GetClusterInfo(ctx, req)
}

func (wh *workflowServiceProxyServer) GetSearchAttributes(ctx context.Context, req *workflowservice.GetSearchAttributesRequest) (*workflowservice.GetSearchAttributesResponse, error) {
	return wh.client.GetSearchAttributes(ctx, req)
}

func (wh *workflowServiceProxyServer) GetWorkflowExecutionHistory(ctx context.Context, req *workflowservice.GetWorkflowExecutionHistoryRequest) (*workflowservice.GetWorkflowExecutionHistoryResponse, error) {
	return wh.client.GetWorkflowExecutionHistory(ctx, req)
}

func (wh *workflowServiceProxyServer) ListArchivedWorkflowExecutions(ctx context.Context, req *workflowservice.ListArchivedWorkflowExecutionsRequest) (*workflowservice.ListArchivedWorkflowExecutionsResponse, error) {
	return wh.client.ListArchivedWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) ListClosedWorkflowExecutions(ctx context.Context, req *workflowservice.ListClosedWorkflowExecutionsRequest) (*workflowservice.ListClosedWorkflowExecutionsResponse, error) {
	return wh.client.ListClosedWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) ListNamespaces(ctx context.Context, req *workflowservice.ListNamespacesRequest) (*workflowservice.ListNamespacesResponse, error) {
	return wh.client.ListNamespaces(ctx, req)
}

func (wh *workflowServiceProxyServer) ListOpenWorkflowExecutions(ctx context.Context, req *workflowservice.ListOpenWorkflowExecutionsRequest) (*workflowservice.ListOpenWorkflowExecutionsResponse, error) {
	return wh.client.ListOpenWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) ListTaskQueuePartitions(ctx context.Context, req *workflowservice.ListTaskQueuePartitionsRequest) (*workflowservice.ListTaskQueuePartitionsResponse, error) {
	return wh.client.ListTaskQueuePartitions(ctx, req)
}

func (wh *workflowServiceProxyServer) ListWorkflowExecutions(ctx context.Context, req *workflowservice.ListWorkflowExecutionsRequest) (*workflowservice.ListWorkflowExecutionsResponse, error) {
	return wh.client.ListWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) PollActivityTaskQueue(ctx context.Context, req *workflowservice.PollActivityTaskQueueRequest) (*workflowservice.PollActivityTaskQueueResponse, error) {
	return wh.client.PollActivityTaskQueue(ctx, req)
}

func (wh *workflowServiceProxyServer) PollWorkflowTaskQueue(ctx context.Context, req *workflowservice.PollWorkflowTaskQueueRequest) (*workflowservice.PollWorkflowTaskQueueResponse, error) {
	return wh.client.PollWorkflowTaskQueue(ctx, req)
}

func (wh *workflowServiceProxyServer) QueryWorkflow(ctx context.Context, req *workflowservice.QueryWorkflowRequest) (*workflowservice.QueryWorkflowResponse, error) {
	return wh.client.QueryWorkflow(ctx, req)
}

func (wh *workflowServiceProxyServer) RecordActivityTaskHeartbeat(ctx context.Context, req *workflowservice.RecordActivityTaskHeartbeatRequest) (*workflowservice.RecordActivityTaskHeartbeatResponse, error) {
	return wh.client.RecordActivityTaskHeartbeat(ctx, req)
}

func (wh *workflowServiceProxyServer) RecordActivityTaskHeartbeatById(ctx context.Context, req *workflowservice.RecordActivityTaskHeartbeatByIdRequest) (*workflowservice.RecordActivityTaskHeartbeatByIdResponse, error) {
	return wh.client.RecordActivityTaskHeartbeatById(ctx, req)
}

func (wh *workflowServiceProxyServer) RegisterNamespace(ctx context.Context, req *workflowservice.RegisterNamespaceRequest) (*workflowservice.RegisterNamespaceResponse, error) {
	return wh.client.RegisterNamespace(ctx, req)
}

func (wh *workflowServiceProxyServer) RequestCancelWorkflowExecution(ctx context.Context, req *workflowservice.RequestCancelWorkflowExecutionRequest) (*workflowservice.RequestCancelWorkflowExecutionResponse, error) {
	return wh.client.RequestCancelWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) ResetStickyTaskQueue(ctx context.Context, req *workflowservice.ResetStickyTaskQueueRequest) (*workflowservice.ResetStickyTaskQueueResponse, error) {
	return wh.client.ResetStickyTaskQueue(ctx, req)
}

func (wh *workflowServiceProxyServer) ResetWorkflowExecution(ctx context.Context, req *workflowservice.ResetWorkflowExecutionRequest) (*workflowservice.ResetWorkflowExecutionResponse, error) {
	return wh.client.ResetWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskCanceled(ctx context.Context, req *workflowservice.RespondActivityTaskCanceledRequest) (*workflowservice.RespondActivityTaskCanceledResponse, error) {
	return wh.client.RespondActivityTaskCanceled(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskCanceledById(ctx context.Context, req *workflowservice.RespondActivityTaskCanceledByIdRequest) (*workflowservice.RespondActivityTaskCanceledByIdResponse, error) {
	return wh.client.RespondActivityTaskCanceledById(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskCompleted(ctx context.Context, req *workflowservice.RespondActivityTaskCompletedRequest) (*workflowservice.RespondActivityTaskCompletedResponse, error) {
	return wh.client.RespondActivityTaskCompleted(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskCompletedById(ctx context.Context, req *workflowservice.RespondActivityTaskCompletedByIdRequest) (*workflowservice.RespondActivityTaskCompletedByIdResponse, error) {
	return wh.client.RespondActivityTaskCompletedById(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskFailed(ctx context.Context, req *workflowservice.RespondActivityTaskFailedRequest) (*workflowservice.RespondActivityTaskFailedResponse, error) {
	return wh.client.RespondActivityTaskFailed(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondActivityTaskFailedById(ctx context.Context, req *workflowservice.RespondActivityTaskFailedByIdRequest) (*workflowservice.RespondActivityTaskFailedByIdResponse, error) {
	return wh.client.RespondActivityTaskFailedById(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondQueryTaskCompleted(ctx context.Context, req *workflowservice.RespondQueryTaskCompletedRequest) (*workflowservice.RespondQueryTaskCompletedResponse, error) {
	return wh.client.RespondQueryTaskCompleted(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondWorkflowTaskCompleted(ctx context.Context, req *workflowservice.RespondWorkflowTaskCompletedRequest) (*workflowservice.RespondWorkflowTaskCompletedResponse, error) {
	return wh.client.RespondWorkflowTaskCompleted(ctx, req)
}

func (wh *workflowServiceProxyServer) RespondWorkflowTaskFailed(ctx context.Context, req *workflowservice.RespondWorkflowTaskFailedRequest) (*workflowservice.RespondWorkflowTaskFailedResponse, error) {
	return wh.client.RespondWorkflowTaskFailed(ctx, req)
}

func (wh *workflowServiceProxyServer) ScanWorkflowExecutions(ctx context.Context, req *workflowservice.ScanWorkflowExecutionsRequest) (*workflowservice.ScanWorkflowExecutionsResponse, error) {
	return wh.client.ScanWorkflowExecutions(ctx, req)
}

func (wh *workflowServiceProxyServer) SignalWithStartWorkflowExecution(ctx context.Context, req *workflowservice.SignalWithStartWorkflowExecutionRequest) (*workflowservice.SignalWithStartWorkflowExecutionResponse, error) {
	return wh.client.SignalWithStartWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) SignalWorkflowExecution(ctx context.Context, req *workflowservice.SignalWorkflowExecutionRequest) (*workflowservice.SignalWorkflowExecutionResponse, error) {
	return wh.client.SignalWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) StartWorkflowExecution(ctx context.Context, req *workflowservice.StartWorkflowExecutionRequest) (*workflowservice.StartWorkflowExecutionResponse, error) {
	return wh.client.StartWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) TerminateWorkflowExecution(ctx context.Context, req *workflowservice.TerminateWorkflowExecutionRequest) (*workflowservice.TerminateWorkflowExecutionResponse, error) {
	return wh.client.TerminateWorkflowExecution(ctx, req)
}

func (wh *workflowServiceProxyServer) UpdateNamespace(ctx context.Context, req *workflowservice.UpdateNamespaceRequest) (*workflowservice.UpdateNamespaceResponse, error) {
	return wh.client.UpdateNamespace(ctx, req)
}
